%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.10
%%CreationDate: Fri Feb 14 18:05:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
AAGAAACUACAGGAAGGGGAACAGGACGGAAACGCCGAGGAACAUGAAUGGAAACAAGCAGCGGAACAUUAAUGAGAAAUUACAAAUAAAAGAGAAA\
) def
/coor [
[146.96748352 360.17669678]
[144.47274780 345.32846069]
[145.12004089 330.28604126]
[148.88108826 315.70700073]
[155.59143066 302.22869873]
[164.95774841 290.44030762]
[176.57058716 280.85720825]
[169.63252258 267.55822754]
[163.63589478 262.99911499]
[162.69294739 253.71992493]
[156.18469238 240.20539856]
[142.08488464 235.54374695]
[135.29206848 221.93080139]
[140.27723694 207.17323303]
[133.76898193 193.65869141]
[122.36089325 189.29614258]
[116.87675476 177.93322754]
[120.80096436 165.51817322]
[106.22414398 162.57632446]
[96.05442810 151.48394775]
[94.34636688 136.35333252]
[101.96324158 122.96342468]
[78.13198090 119.03933716]
[65.92537689 92.25979614]
[51.84834671 87.07932281]
[42.52150345 87.03174591]
[37.40763092 81.50061035]
[23.50388145 75.87160492]
[7.34647322 78.67699432]
[-2.95260668 65.91529846]
[3.20145226 50.71464920]
[19.47788239 48.71218109]
[29.13288689 61.96785736]
[43.03663635 67.59686279]
[57.02882385 73.00229645]
[71.10585022 78.18276978]
[77.69889069 74.60760498]
[67.82878876 63.31242371]
[56.51134872 53.46785355]
[58.15110779 38.55775070]
[71.33751678 31.40802765]
[84.72741699 38.16899490]
[86.80309296 53.02333832]
[90.88497162 67.45726776]
[97.47800446 63.88209915]
[100.81581879 49.25817871]
[92.67176819 35.97991943]
[96.26511383 21.19673347]
[108.97409058 13.51445580]
[112.31190491 -1.10946262]
[106.96376038 -16.61202240]
[117.91814423 -28.81585121]
[133.90612793 -25.16669846]
[138.48065186 -9.41849804]
[126.93582916 2.22835135]
[123.59801483 16.85227013]
[131.71519470 29.28798294]
[128.53849792 44.16626358]
[115.43974304 52.59599304]
[112.10192871 67.21990967]
[126.61382294 84.14720917]
[126.73783875 103.84128571]
[115.67942810 116.89167786]
[130.71250916 120.25511169]
[140.76504517 131.69189453]
[142.13937378 146.67771912]
[134.51715088 159.44641113]
[149.61286926 169.83808899]
[147.28350830 187.15043640]
[153.79176331 200.66496277]
[168.43789673 205.96859741]
[174.84568787 219.76696777]
[169.69921875 233.69714355]
[176.20747375 247.21166992]
[182.93150330 260.62014771]
[189.86958313 273.91912842]
[204.37326050 269.87725830]
[219.40039062 268.93960571]
[234.29403687 271.14712524]
[248.40310669 276.40332031]
[261.11080933 284.47845459]
[271.86163330 295.01950073]
[280.18560791 307.56561279]
[285.71884155 321.56835938]
[288.21939087 336.41561890]
[287.57803345 351.45831299]
[283.82272339 366.03881836]
[277.11767578 379.51977539]
[267.75598145 391.31182861]
[256.14691162 400.89947510]
[242.79797363 407.86361694]
[228.29269409 411.89981079]
[213.26521301 412.83157349]
[198.37243652 410.61816406]
[184.26542664 405.35641479]
[171.56089783 397.27627563]
[160.81420898 386.73101807]
] def
/pairs [
[7 76]
[8 75]
[10 74]
[11 73]
[14 70]
[15 69]
[18 67]
[22 63]
[24 36]
[25 35]
[27 34]
[28 33]
[45 60]
[46 59]
[49 56]
[50 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
